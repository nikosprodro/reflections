When would you want to use a remote repository rather than keeping all
your work local?

  Using a remote repository is preferable when you have to work from many
different physical computers during the course of the project, or when
colaborating with people and all of them need access to the code (to
both push and pull), another reason to use a remote repository is if you
want to share your projects with the world and maybe also let other
developers you do not know contribute to your project.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  It is better to have control of what code exists in your local repository so as not to get mixed with other peoples code, this might confuse you (if a new functionality is added in what you are wotking on) or even create confilcts

Describe the differences between forks, clones, and branches. When would
you use one instead of another?

  Forks are used to copy someones code in your github space and then clone it in your working area and work with it independently of the original project.
  Clones are copies of a repository which you can work on and then commit changes back to the repository.
  Branches are parts of a repository and have different parts of code and commit history they might exist only in the working area or also commited to the repository. Branches can be merged together as well as at the master branch.

  It is preferable to FORK a repository in order to make changes without affecting the code on the original project. CLONES should be used when you want to start working on a repository and start keeping log and committing changes and BRANCHES should be created when working on different aspects of the project that you do not want to merge yet in the master branch.

What is the benefit of having a copy of the last known state of the
remote stored locally?

  After you fetch a copy of the last known state of a remote branch you can work with it even if you are offline, and then you can push your changes at any point in the future.

How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

  Without github (or any other versioning tool) colaboration with
other people would require some means of communication in order to
review code that has changed and code from work in progress, in order to verify that there will be no conflicts upon changes and that the code is good to be deployed. Furthermore we would need some space to place the code, and this space would need to be administered by someone.
  There are other aspects of collaboration that github handles
automatically (commenting on specific code changes, reviewing history
et.) the lack of which (automation) makes collaboration extremely difficult.

When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

  When the changes refer to parts of code that other people might be
working on then it makes sense to do them in a separate branch and
eventually committing that branch and making a pull request. Also I
would use a different branch when working on a completely new feature
that will not be ready to be committed to master for quite some time.
  The benefit of working on a separate branch is that I can keep my
code independent and merge it only when it is properly ready to be
added to master, the benefit of working on the master branch is that I
can do my work more quickly and without the extra branching overhead,
if of course it is not necessary. 
