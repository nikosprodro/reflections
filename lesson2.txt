What happens when yo initialize a repository? Why do you need to do it?

  You need to initialize a repository in order to add it under git
control and start using it with the git versioning system.
When initializing a repository a hidden git directory is created
which holds all the information about the versions and status of the
files within that repository. As one would expect there are no commits in a newly created repository, and the files of that repository need to be added to git by using the "git add" command before starting commiting them.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

  The staging area is the intermediate area between the working
directory and the repository, files are added to the staging area
before being committed to the repository.
  The staging area helps keep track of the changes (and files) that are to be committed to the repository, you can keep a new file ior new code safely in your working directory and only add it in the staging area when it is ready to be committed.

How can you use the staging ara to make sure you have one commit per
logical change?

  Even if you have worked on many parts of your project in your
working directory and have many "logical" changes to commit you can add them to the staging area and commit them one-by-one thus keeping your commits clean and with meaningfull messages.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

  Branches help organize history when creating new features, you can have the code for the new feature seperated in a branch, have all the historical data of those changes bundled together and then commit them when the feature is ready to be deployed.
  Also branches can be used in trscking teamwork history. When developers are working on different areas of a project (i.e. one developer's code does not touch another developer's code), each developer can work and commit his changes on his own branch, and at the end all branches can be merged into the master branch.

How do the diagrams help you visualize the branch structure?

  By drawing a graph of the structure of your branches you can clearly see at what point in history every branch was created and get a picture of
which commits are accessible by each branch. Also you can manually add
any detached HEAD commits that you create by adding their node and log
ID to your graph, it is rough but can be proven very helpful in
situations where you left the commit hanging without creating a branch
for it yet.
NOTE: the command "git checkout -b new_branch_name" is shorthand for the
two command:
1) git branch new_branch_name
2) git checkout new_branch_name

What is the result of merging two branches together? Why do we
represent it in the diagram the way we do?

  Merging two branches does mainly two things, it combines the code from the tip of one branch to the tip of the other and it joins the commits of the two branches sorting them in the list with the chronological order they where created.
  When one of the merging branches is the master then we typicaly say that we merge the changes "into the master branch" and afterwards we delete the merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

  Automatic merging:
Pro: Very usefull when merging big chunks of code
Pro: It automaticaly combines the commits nicely in chronological order
Con: It is virtualy impossible to resolve conflicts on its own

  Manual Merging:
Pros & Cons are the exact opposites of "Automatic merging"
